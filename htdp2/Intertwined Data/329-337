; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 329
; 
; How many times does a file name read! occur in the directory tree TS? 
; - 2 times
; Can you describe the path from the root directory to the occurrences? 
; - /TS/read!
; - /TS/Libs/Docs/read!
; What is the total size of all the files in the tree? 
; - 10 + 99 + 52 + 17 + 19 + 2 + 8
; What is the total size of the directory if each directory node has size 1? 
; - 10 + 99 + 52 + 17 + 19 + 2 + 8 + 5
; How many levels of directories does it contain?
; - 5

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

; A Dir.v1 (short for directory) is one of: 
; – '()
; – (cons File.v1 Dir.v1)
; – (cons Dir.v1 Dir.v1)
 
; A File.v1 is a String.

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 330

(define dirtree.v1 (list (list "Text" "part1" "part2" "part3") "read!" (list (list "Code" "hang" "draw") (list "read!"))))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 331

; Dir.v1 -> Number
; Determines how many files a given Dir.v1 contains.
(check-expect (how-many dirtree.v1) 9)
(define (how-many directory)
  (cond
    [(empty? directory) 0] ; empty directory
    [(string? (first directory)) (+ (how-many (rest directory)) 1)] ; un archivo
    [else
     (+ (how-many (first directory))
        (how-many (rest directory)))]))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

(define-struct dir [name content])
; A Dir.v2 is a structure: 
;   (make-dir String LOFD)
 
; An LOFD (short for list of files and directories) is one of:
; – '()
; – (cons File.v2 LOFD)
; – (cons Dir.v2 LOFD)
 
; A File.v2 is a String.

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 332

(define dirtree.v2 (make-dir "TS" (list (make-dir "Text" (list "part1" "part2" "part3")) "read!" (make-dir "Libs" (list (make-dir "Code" (list "hang" "draw")) (make-dir "Docs" (list "read")))))))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 333

; Dir.v2 -> Number
; Determines how many files a given Dir.v2 contains.
(check-expect (how-many.v2 dirtree.v2) 7)
(define (how-many.v2 dir)
  (foldl (lambda (x acc) (+ acc (if (string? x) 1 (how-many.v2 x))))
         0 (dir-content dir)))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 334

(define-struct dir.v2.1 [name content size readibility])
; A Dir.v2.1 is a structure: 
;   (make-dir String LOFD Number String)
 
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

(define-struct file [name size content])
; A File.v3 is a structure: 
;   (make-file String N String)

(define-struct dir.v3 [name dirs files])
; A Dir.v3 is a structure: 
;   (make-dir.v3 String Dir* File*)
 
; A Dir* is one of: 
; – '()
; – (cons Dir.v3 Dir*)
 
; A File* is one of: 
; – '()
; – (cons File.v3 File*)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 335

; (define dirtree.v3 (make-dir.v3 "TS" (list (make-dir.v3 "Text" (list (make-file "part1" 99 "") (make-file "part2" 52 "") (make-file "part3" 17 "")) '()) (make-dir.v3 "Libs" (list (make-dir.v3 "Code" '() (list (make-file "hang" 8 "") (make-file "draw" 2 ""))) (make-dir.v3 "Docs" '() (list (make-file "read!" 19 ""))))'())) (list (make-file "read!" 10 ""))))
(define dirtree.v3 
  (make-dir.v3 "TS" 
    (list 
      (make-dir.v3 "Text" '() (list (make-file "part1" 99 "") (make-file "part2" 52 "") (make-file "part3" 17 "")))
      (make-dir.v3 "Libs" 
        (list 
          (make-dir.v3 "Code" '() (list (make-file "hang" 8 "") (make-file "draw" 2 "")))
          (make-dir.v3 "Docs" '() (list (make-file "read!" 19 "")))
        ) 
        '()
      )
    ) 
    (list (make-file "read!" 10 ""))
  )
)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 336

; Dir.v3 -> Number
; Determines how many files a given Dir.v3 contains.
(check-expect (how-many.v3 dirtree.v3) 7)
(define (how-many.v3 dir)
  (+ (length (dir.v3-files dir))
             (foldl (lambda (x acc) (+ acc (how-many.v3 x)))
                    0 (dir.v3-dirs dir))))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 337

(define-struct file [name size content])
; A File.v4 is a structure: 
;   (make-file String N String)

(define-struct dir.v4 [name dirs files])
; A Dir.v4 is a structure: 
;   (make-dir.v4 String [List-of Dir] [List-of File])
