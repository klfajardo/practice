  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 356

; A BSL-fun-expr is one of: 
; – Number
; – Symbol
; – (make-add BSL-fun-expr BSL-fun-expr)
; – (make-mul BSL-fun-expr BSL-fun-expr)
; – (make-fun BSL-fun-expr BSL-fun-expr)

(define-struct fun [name arg])
; make-fun is a structure
; - [String BSL-fun-expr]

; (define (f x) x)
; (define (k x) x)

; (make-fun 'k (make-add 1 1))
; (make-mul 5 (make-fun 'k (make-add 1 1)))
; (make-mul (make-fun 'k 5) (make-fun 'k (make-add 1 1)))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 357

; BSL-fun-expr Symbol Symbol BSL-fun-expr -> Value
; Determines the value of ex
(check-expect (eval-definition1 (make-fun 'k (make-add 1 1)) 'k 'x (make-mul 'x 'x)) 4)
(check-expect (eval-definition1 (make-fun 'g 5) 'g 'x (make-add 'x 2)) 7)
(define (eval-definition1 ex f x b)
  (cond
    [(add? ex) (+ (eval-definition1 (add-left ex) f x b) (eval-definition1 (add-right ex) f x b))]
    [(mul? ex) (* (eval-definition1 (mul-left ex) f x b) (eval-definition1 (mul-right ex) f x b))]
    [(fun? ex)
     (local
       ((define value (eval-definition1 (fun-arg ex) f x b))
        (define plugd (subst b x value)))
       (eval-definition1 plugd f x b))]
    [else ex]))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 358

(define-struct fun-def [name arg expr])
; fun-def is a structure
; - [Symbol Symbol? BSL-var-expr]

; A BSL-fun-def is:  
; – (make-fun-def Symbol Symbol BSL-var-expr)
; eg:
; (define (f x) (+ 3 x))
(define f (make-fun-def 'f 'x (make-add 3 'x)))
; (define (g y) (f (* 2 y))) 
(define g (make-fun-def 'g 'y (make-fun 'f (make-mul 2 'y))))
; (define (h v) (+ (f v) (g v)))
(define h (make-fun-def 'h 'v (make-add (make-fun 'f 'v) (make-fun 'g 'v))))

; a BSL-fun-def* is [List-of BSL-fun-def]
(define da-fgh (list f g h))

; BSL-fun-def* Symbol -> BSL-fun-def
; retrieves the definition of f in da
; signals an error if there is none
(check-expect (lookup-def da-fgh 'g) g)
(check-expect (lookup-def da-fgh 'a) WRONG)
(define (lookup-def da f)
  (cond
    [(empty? da) WRONG]
    [(equal? f (fun-def-name (first da))) (first da)]
    [else
     (lookup-def (rest da) f)]))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Exercise 359

; BSL-fun-expr BSL-fun-def* -> Number
; It produces the result that DrRacket shows if you evaluate ex in the interactions area
(check-expect (eval-function* (make-fun 'f 4) da-fgh) 7)
(check-expect (eval-function* (make-fun 'g 1) da-fgh) 5)
(check-expect (eval-function* (make-fun 'h 1) da-fgh) 9)
(define (eval-function* ex da)
  (cond
    [(add? ex) (+ (eval-function* (add-left ex) da) (eval-function* (add-right ex) da))]
    [(mul? ex) (* (eval-function* (mul-left ex) da) (eval-function* (mul-right ex) da))]
    [(fun? ex)
     (local
       ((define func (lookup-def da (fun-name ex)))
        (define value (eval-function* (fun-arg ex) da))
        (define plugd (subst (fun-def-expr func) (fun-def-arg func) value)))
       (eval-function* plugd da))]
    [else ex]))

; The first check-expect is working fine but for some reason the other two are returning error.
; I still have to fix that
; The issue might be in this definition or the subst function, in some recursive call (Maybe the nested definitions of g and h are causing trouble, those are not being handled properly)
